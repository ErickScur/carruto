<div class="row justify-content-center">
  <div class="col-md-8 col-lg-6">
    <!-- Waiting Panel -->
    <div id="waiting-panel" class="card waiting-card animate__animated animate__fadeIn">
      <div class="card-header text-center">
        <h2 class="card-title mb-0">
          <i class="fas fa-hourglass-half animate__animated animate__pulse animate__infinite"></i>
          Preparando o Jogo
        </h2>
      </div>
      <div class="card-body text-center py-5">
        <div class="welcome-section mb-5">
          <div class="avatar-welcome">
            <i class="fas fa-user-astronaut fa-5x" style="color: #00f2fe;"></i>
            <div class="welcome-pulse"></div>
          </div>
          <h3 class="mt-4 player-welcome">
            Bem-vindo, <span class="player-name-highlight">{{playerName}}</span>!
          </h3>
          <p class="success-message">
            <i class="fas fa-check-circle"></i>
            Você entrou no jogo com sucesso
          </p>
        </div>

        <div class="loading-section">
          <div class="custom-loader">
            <div class="loader-dot"></div>
            <div class="loader-dot"></div>
            <div class="loader-dot"></div>
          </div>
          <p class="loading-text mt-3">Aguardando o host iniciar o jogo...</p>
        </div>
        
        <div class="tips-section mt-5">
          <p class="tip-text">
            <i class="fas fa-lightbulb"></i>
            Dica: Responda rápido para ganhar mais pontos!
          </p>
        </div>
      </div>
    </div>

    <!-- Question Panel -->
    <div id="question-panel" class="card question-card d-none animate__animated animate__fadeIn">
      <div class="card-header text-center">
        <h2 class="card-title mb-0">
          <i class="fas fa-question-circle me-2"></i>
          Responda Rápido!
        </h2>
      </div>
      <div class="card-body">
        <div id="timer-container" class="timer-section mb-4">
          <div class="timer-info">
            <span class="timer-label">
              <i class="fas fa-clock"></i> Tempo
            </span>
            <span id="timer-text" class="timer-value">0</span>
          </div>
          <div class="timer-bar-container">
            <div class="timer" id="timer-bar"></div>
            <div class="timer-pulse"></div>
          </div>
        </div>

        <div id="question-container" class="question-content">
          <h3 id="question-text" class="question-title">O texto da questão aparecerá aqui</h3>

          <div id="choices-container" class="choices-grid">
            <!-- Choices will be dynamically added here -->
          </div>
        </div>
      </div>
    </div>

    <!-- Answer Feedback -->
    <div id="answer-feedback" class="card feedback-card d-none animate__animated animate__zoomIn">
      <div class="card-body text-center py-5">
        <div id="feedback-correct" class="feedback-content d-none">
          <div class="success-animation mb-4">
            <i class="fas fa-check-circle fa-6x animate__animated animate__bounceIn"></i>
            <div class="confetti">
              <span></span>
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
          <h3 class="feedback-title success-title">Excelente!</h3>
          <p class="feedback-message">
            Você ganhou 
            <span id="points-earned" class="points-highlight">0</span> 
            pontos!
          </p>
        </div>

        <div id="feedback-incorrect" class="feedback-content d-none">
          <div class="error-animation mb-4">
            <i class="fas fa-times-circle fa-6x animate__animated animate__shakeX"></i>
          </div>
          <h3 class="feedback-title error-title">Ops!</h3>
          <p class="feedback-message">Não foi dessa vez, mas continue tentando!</p>
        </div>

        <div id="feedback-waiting" class="waiting-next mt-3">
          <div class="next-loader">
            <div class="spinner-circle"></div>
          </div>
          <p class="mt-3">Preparando próxima questão...</p>
        </div>
      </div>
    </div>

    <!-- Game Results -->
    <div id="game-results" class="card results-card d-none animate__animated animate__fadeIn">
      <div class="card-header text-center">
        <h2 class="card-title mb-0">
          <i class="fas fa-trophy me-2"></i>
          Fim de Jogo!
        </h2>
      </div>
      <div class="card-body">
        <div class="celebration-section">
          <div class="celebration-icons">
            <span class="celebration-icon">🎉</span>
            <span class="celebration-icon">🎊</span>
            <span class="celebration-icon">✨</span>
          </div>
        </div>

        <div id="your-result" class="your-result-card mb-4">
          <div class="result-content">
            <h4 class="your-score-title">Sua Pontuação</h4>
            <div class="score-display">
              <span id="your-score" class="score-number">0</span>
              <span class="score-label">pontos</span>
            </div>
            <p id="your-rank" class="rank-text">Sua posição: #0 de 0</p>
          </div>
          <div class="result-decoration"></div>
        </div>

        <h3 class="mb-4 text-center ranking-title">
          <i class="fas fa-list-ol me-2"></i>
          Ranking Final
        </h3>

        <div class="rankings-container">
          <ul id="results-list" class="rankings-list">
          </ul>
        </div>

        <div class="text-center mt-5">
          <a href="/" class="btn btn-primary btn-lg play-again-btn">
            <i class="fas fa-redo me-2"></i>
            Jogar Novamente
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Waiting Panel Styles */
  .waiting-card {
    background: rgba(255, 255, 255, 0.05);
  }

  .avatar-welcome {
    position: relative;
    display: inline-block;
  }

  .welcome-pulse {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 120px;
    height: 120px;
    background: radial-gradient(circle, rgba(0, 242, 254, 0.3) 0%, transparent 70%);
    border-radius: 50%;
    animation: pulse 2s ease-out infinite;
  }

  .player-welcome {
    color: white;
    font-weight: 600;
  }

  .player-name-highlight {
    background: linear-gradient(135deg, #00f2fe 0%, #4facfe 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    font-weight: 700;
  }

  /* Safari fallback */
  @supports not (-webkit-background-clip: text) {
    .player-name-highlight {
      background: none;
      color: #00f2fe;
      -webkit-text-fill-color: #00f2fe;
    }
  }

  .success-message {
    color: #4facfe;
    font-size: 1.1rem;
  }

  .custom-loader {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
  }

  .loader-dot {
    width: 15px;
    height: 15px;
    background: #00f2fe;
    border-radius: 50%;
    animation: loader-bounce 1.4s ease-in-out infinite both;
  }

  .loader-dot:nth-child(1) { animation-delay: -0.32s; }
  .loader-dot:nth-child(2) { animation-delay: -0.16s; }

  @keyframes loader-bounce {
    0%, 80%, 100% {
      transform: scale(0);
      opacity: 0.5;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }

  .loading-text {
    color: rgba(255, 255, 255, 0.8);
    font-size: 1.1rem;
  }

  .tip-text {
    color: rgba(255, 255, 255, 0.6);
    font-style: italic;
  }

  /* Question Panel Styles */
  .question-card {
    background: rgba(255, 255, 255, 0.05);
  }

  .timer-section {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    padding: 1rem;
  }

  .timer-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .timer-label {
    color: rgba(255, 255, 255, 0.8);
    font-weight: 500;
  }

  .timer-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #00f2fe;
    font-family: 'Space Grotesk', monospace;
  }

  .timer-bar-container {
    position: relative;
    height: 20px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    overflow: hidden;
  }

  .timer {
    height: 100%;
    background: linear-gradient(90deg, #00f2fe 0%, #4facfe 100%);
    border-radius: 10px;
    transition: width 1s linear;
    position: relative;
  }

  .timer-pulse {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    animation: shimmer 2s infinite;
  }

  .question-title {
    color: white;
    font-size: 1.5rem;
    text-align: center;
    margin: 2rem 0;
    line-height: 1.6;
  }

  .choices-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .choice-btn {
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.2);
    color: white;
    padding: 1.25rem;
    border-radius: 15px;
    font-size: 1.1rem;
    text-align: left;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .choice-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transform: translateY(-50%);
    transition: left 0.5s;
  }

  .choice-btn:hover::before {
    left: 100%;
  }

  .choice-btn:hover:not(:disabled) {
    transform: translateX(10px);
    border-color: rgba(255, 255, 255, 0.4);
    background: rgba(255, 255, 255, 0.15);
  }

  .choice-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .choice-btn.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-color: #667eea;
    animation: selected-pulse 0.5s ease;
  }

  @keyframes selected-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  /* Feedback Styles */
  .feedback-card {
    background: rgba(255, 255, 255, 0.05);
  }

  .success-animation {
    position: relative;
    color: #4facfe;
  }

  .error-animation {
    color: #fa709a;
  }

  .confetti {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .confetti span {
    position: absolute;
    width: 10px;
    height: 10px;
    background: #ffd700;
    border-radius: 50%;
    animation: confetti-burst 1s ease-out forwards;
  }

  .confetti span:nth-child(1) { animation-delay: 0s; --angle: 0deg; }
  .confetti span:nth-child(2) { animation-delay: 0.1s; --angle: 72deg; }
  .confetti span:nth-child(3) { animation-delay: 0.2s; --angle: 144deg; }
  .confetti span:nth-child(4) { animation-delay: 0.3s; --angle: 216deg; }
  .confetti span:nth-child(5) { animation-delay: 0.4s; --angle: 288deg; }

  @keyframes confetti-burst {
    0% {
      transform: translate(0, 0) scale(0);
      opacity: 1;
    }
    100% {
      transform: translate(calc(100px * cos(var(--angle))), calc(100px * sin(var(--angle)))) scale(1);
      opacity: 0;
    }
  }

  .feedback-title {
    font-size: 2rem;
    font-weight: 700;
    margin: 1rem 0;
  }

  .success-title {
    color: #4facfe;
  }

  .error-title {
    color: #fa709a;
  }

  .feedback-message {
    font-size: 1.2rem;
    color: rgba(255, 255, 255, 0.9);
  }

  .points-highlight {
    font-size: 1.5rem;
    font-weight: 700;
    color: #ffd700;
    text-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
  }

  .next-loader {
    width: 60px;
    height: 60px;
    margin: 0 auto;
  }

  .spinner-circle {
    width: 100%;
    height: 100%;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-top: 4px solid #00f2fe;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  /* Results Styles */
  .results-card {
    background: rgba(255, 255, 255, 0.05);
  }

  .celebration-section {
    text-align: center;
    margin-bottom: 2rem;
  }

  .celebration-icons {
    display: flex;
    justify-content: center;
    gap: 2rem;
  }

  .celebration-icon {
    font-size: 3rem;
    animation: celebrate 2s ease-in-out infinite;
  }

  .celebration-icon:nth-child(1) { animation-delay: 0s; }
  .celebration-icon:nth-child(2) { animation-delay: 0.3s; }
  .celebration-icon:nth-child(3) { animation-delay: 0.6s; }

  @keyframes celebrate {
    0%, 100% { transform: scale(1) rotate(0deg); }
    50% { transform: scale(1.2) rotate(10deg); }
  }

  .your-result-card {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
    border: 2px solid rgba(102, 126, 234, 0.3);
    border-radius: 20px;
    padding: 2rem;
    position: relative;
    overflow: hidden;
  }

  .result-decoration {
    position: absolute;
    top: -50px;
    right: -50px;
    width: 150px;
    height: 150px;
    background: radial-gradient(circle, rgba(255, 215, 0, 0.2) 0%, transparent 70%);
    border-radius: 50%;
  }

  .your-score-title {
    color: rgba(255, 255, 255, 0.8);
    font-weight: 500;
    margin-bottom: 1rem;
  }

  .score-display {
    display: flex;
    align-items: baseline;
    justify-content: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .score-number {
    font-size: 4rem;
    font-weight: 700;
    background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    line-height: 1;
  }

  /* Safari fallback */
  @supports not (-webkit-background-clip: text) {
    .score-number {
      background: none;
      color: #ffd700;
      -webkit-text-fill-color: #ffd700;
    }
  }

  .score-label {
    font-size: 1.5rem;
    color: rgba(255, 255, 255, 0.7);
  }

  .rank-text {
    color: rgba(255, 255, 255, 0.8);
    font-size: 1.2rem;
  }

  .ranking-title {
    color: white;
    font-weight: 600;
  }

  .rankings-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 1rem;
  }

  .rankings-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .rankings-list .player-item {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 1rem 1.5rem;
    margin-bottom: 0.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    transition: all 0.3s ease;
    animation: slideInUp 0.5s ease;
  }

  .rankings-list .player-item:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateX(5px);
  }

  .play-again-btn {
    animation: pulse 2s infinite;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .question-title {
      font-size: 1.25rem;
    }
    
    .score-number {
      font-size: 3rem;
    }
    
    .celebration-icon {
      font-size: 2rem;
    }
  }

  /* Safari mobile specific fixes */
  @media screen and (-webkit-min-device-pixel-ratio: 2) {
    .waiting-card, .question-card, .feedback-card, .results-card {
      background: rgba(255, 255, 255, 0.25) !important;
      border: 2px solid rgba(255, 255, 255, 0.5) !important;
      -webkit-backdrop-filter: none !important;
      backdrop-filter: none !important;
    }
    
    .timer-section, .stats-card, .your-result-card, .rankings-container {
      background: rgba(255, 255, 255, 0.2) !important;
      border: 1px solid rgba(255, 255, 255, 0.4) !important;
    }
    
    .choice-btn {
      background: rgba(255, 255, 255, 0.3) !important;
      border: 2px solid rgba(255, 255, 255, 0.6) !important;
      color: white !important;
    }
    
    .choice-btn:hover {
      background: rgba(255, 255, 255, 0.4) !important;
    }
    
    /* Garantir que o texto seja visível */
    .player-welcome, .question-title, .feedback-title, .ranking-title {
      color: white !important;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5) !important;
    }
    
    .loading-text, .tip-text, .feedback-message {
      color: rgba(255, 255, 255, 0.9) !important;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3) !important;
    }
  }
</style>

<script>
  const gameId = "{{gameId}}";
  const playerId = "{{playerId}}";
  const playerName = "{{playerName}}";
  let currentScore = 0;
  let currentQuestion = null;
  let timerInterval = null;

  const waitingPanel = document.getElementById('waiting-panel');
  const questionPanel = document.getElementById('question-panel');
  const answerFeedback = document.getElementById('answer-feedback');
  const gameResults = document.getElementById('game-results');

  // Debug: Garantir que apenas o painel de espera seja visível inicialmente
  console.log('Inicializando painéis...');
  waitingPanel.classList.remove('d-none');
  questionPanel.classList.add('d-none');
  answerFeedback.classList.add('d-none');
  gameResults.classList.add('d-none');
  console.log('Painéis inicializados - apenas waiting-panel visível');

  const socket = new WebSocket(`{{wsUrl}}`);

  socket.onopen = function() {
    console.log('WebSocket connection established');
    socket.send(JSON.stringify({
      event: 'joinRoom',
      payload: { roomId: gameId }
    }));
  };

  socket.onmessage = function(event) {
    const data = JSON.parse(event.data);
    switch(data.event) {
      case 'gameStarted': handleGameStarted(data.payload); break;
      case 'questionStarted': handleQuestionStarted(data.payload); break;
      case 'answerResult': handleAnswerResult(data.payload); break;
      case 'gameEnded': handleGameEnded(data.payload); break;
    }
  };

  socket.onclose = function(event) {
    console.log('WebSocket connection closed:', event);
  };

  socket.onerror = function(error) {
    console.error('WebSocket error:', error);
  };

  function handleGameStarted(data) {
    console.log('Game started:', data);
  }

  function handleQuestionStarted(data) {
    console.log('Questão iniciada - mudando para painel de questão');
    currentQuestion = data;
    waitingPanel.classList.add('d-none');
    answerFeedback.classList.add('d-none');
    gameResults.classList.add('d-none');
    questionPanel.classList.remove('d-none');
    document.getElementById('question-text').textContent = data.text;
    const choicesContainer = document.getElementById('choices-container');
    choicesContainer.innerHTML = '';
    data.choices.forEach(choice => {
      const button = document.createElement('button');
      button.className = 'btn btn-outline-primary choice-btn';
      button.textContent = choice.text;
      button.dataset.choiceId = choice.id;
      button.addEventListener('click', () => submitAnswer(choice.id));
      choicesContainer.appendChild(button);
    });
    const timerBar = document.getElementById('timer-bar');
    const timerText = document.getElementById('timer-text');
    let timeLeft = data.timeLimit;
    timerBar.style.width = '100%';
    timerText.textContent = timeLeft;
    if (timerInterval) {
      clearInterval(timerInterval);
    }
    timerInterval = setInterval(() => {
      timeLeft--;
      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        timerBar.style.width = '0%';
        timerText.textContent = '0';
        const buttons = choicesContainer.querySelectorAll('button');
        buttons.forEach(button => {
          button.disabled = true;
        });
        setTimeout(() => {
          console.log('Tempo esgotado - mudando para feedback de espera');
          questionPanel.classList.add('d-none');
          waitingPanel.classList.add('d-none');
          gameResults.classList.add('d-none');
          document.getElementById('feedback-correct').classList.add('d-none');
          document.getElementById('feedback-incorrect').classList.add('d-none');
          document.getElementById('feedback-waiting').classList.remove('d-none');
          answerFeedback.classList.remove('d-none');
        }, 1000);
      } else {
        const percentage = (timeLeft / data.timeLimit) * 100;
        timerBar.style.width = `${percentage}%`;
        timerText.textContent = timeLeft;
      }
    }, 1000);
  }

  function submitAnswer(choiceId) {
    const choicesContainer = document.getElementById('choices-container');
    const buttons = choicesContainer.querySelectorAll('button');
    buttons.forEach(button => {
      button.disabled = true;
      if (button.dataset.choiceId === choiceId) {
        button.classList.remove('btn-outline-primary');
        button.classList.add('btn-primary');
      }
    });
    fetch('/api/submit-answer', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ gameId, playerId, choiceId })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        console.log('Answer submitted successfully');
      } else {
        console.error('Failed to submit answer:', data.error);
      }
    })
    .catch(error => console.error('Error submitting answer:', error));
    setTimeout(() => {
      console.log('Resposta enviada - mudando para feedback de espera');
      questionPanel.classList.add('d-none');
      waitingPanel.classList.add('d-none');
      gameResults.classList.add('d-none');
      document.getElementById('feedback-correct').classList.add('d-none');
      document.getElementById('feedback-incorrect').classList.add('d-none');
      document.getElementById('feedback-waiting').classList.remove('d-none');
      answerFeedback.classList.remove('d-none');
    }, 500);
  }

  function handleAnswerResult(data) {
    console.log('Resultado da resposta recebido:', data.isCorrect ? 'Correto' : 'Incorreto');
    document.getElementById('feedback-waiting').classList.add('d-none');
    if (data.isCorrect) {
      document.getElementById('feedback-correct').classList.remove('d-none');
      document.getElementById('points-earned').textContent = data.points;
    } else {
      document.getElementById('feedback-incorrect').classList.remove('d-none');
    }
    currentScore = data.newTotalScore;
  }

  function handleGameEnded(data) {
    console.log('Jogo finalizado - mudando para resultados');
    waitingPanel.classList.add('d-none');
    questionPanel.classList.add('d-none');
    answerFeedback.classList.add('d-none');
    gameResults.classList.remove('d-none');
    if (timerInterval) {
      clearInterval(timerInterval);
      timerInterval = null;
    }
    const resultsList = document.getElementById('results-list');
    resultsList.innerHTML = data.rankings.map((player, index) => `
      <li class="list-group-item player-item">
        <span> ${index === 0 ? '🏆 ' : ''}${index + 1}. ${player.name} </span>
        <span>${player.score} pts</span>
      </li>
    `).join('');
    
    // Buscar a pontuação correta do jogador atual nos rankings
    const currentPlayer = data.rankings.find(player => player.id === playerId);
    const playerScore = currentPlayer ? currentPlayer.score : 0;
    
    document.getElementById('your-score').textContent = playerScore;
    const playerRank = data.rankings.findIndex(player => player.id === playerId) + 1;
    document.getElementById('your-rank').textContent = `Sua posição: #${playerRank} de ${data.rankings.length}`;
  }
</script>